1. Introduction
---------------

Complemake – the build tool your project was missing.

Complemake is a build utility for software (currently C++-only) projects,
featuring:

•  Multiple platform compatibility (currently FreeBSD, Linux, OS X, Windows)
•  Parallel execution of all sub-processes;
•  Simple, YAML-based syntax
•  Minimal instructions required in each project, and no toolchain-specific
   commands/flags;
•  Integration with Abaclade’s abc::testing framework, providing a fluid
   automated testing experience (see <https://github.com/raffaellod/abaclade>);
•  Command-line options generally compatible with GNU make, to be immediately
   usable by GNU make users.
•  No GNU Autotools


2. Getting Complemake
---------------------

Complemake is available at https://github.com/raffaellod/complemake via git; to
download it, just clone the repository:

   git clone https://github.com/raffaellod/complemake.git
   cd complemake

The default branch, master, is where all development occurs. See § 6. Versioning
and branching for more information on available branches.


3. Building Complemake
----------------------

Since Complemake is entirely written in Python, it doesn’t need to be built.


4. Installing Complemake
------------------------

At the moment, Complemake lacks any means for installation. The recommended way
to “install” it for the time being is to create a symlink to complemake.py in a
directory in the system PATH (such as /usr/local/bin on non-Windows system).

TODO: make Complemake installable.


5. Using Complemake
-------------------

In order to use Complemake, a Complemake file (a fairly simple YAML file; see
[DOC:5581 Complemake files]) must be created for your project, defining a list
of named and unnamed (file path-only) targets.

Complemake should be run preferably from the directory containing the target
project’s Complemake file (.comk), relying on the PATH environment variable to
locate the complemake.py program:

   complemake.py


When running, Complemake will build the targets in the project and create
outputs in the bin/ and lib/ directories.

Run complemake.py --help to see a guide to Complemake’s command-line arguments.


6. Versioning and branching
-----------------------------

Complemake uses semantical versioning, with releases named vX.Y.Z where X is the
major version, Y is the minor version, and Z is the revision.

While the major number is 0, changes to the minor indicate breaking changes,
while the revision is incremented for non-breaking changes such as bug fixes and
minor improvements.
The only git branch is master, and each release is a tag along master’s history.
There are no maintenance releases.

Version 1.0.0 will indicate the first production-grade release, and the meaning
of the versioning schema will shift accordingly: the major number will indicate
breaking changes, the minor non-breaking changes (e.g. for maintenance
releases), and the revision will be incremented for bug fixes and other minor
improvements.
The main git branch will remanin master, but each major release will get its own
branch, to support maintenance releases independent of the master branch.


7. Compatibility
----------------

Complemake is in full development, so the compatibility can and will change over
time (hopefully expanding).

Supported build systems:

•  GNU toolchain
   •  GCC 4.7 to 5.2
   •  binutils 2.20 or later

•  Microsoft Visual Studio 2010-2013 (Visual C++ 10-12 / MSC 16-18)

•  Clang + GNU LD
   •  Clang 3.5
   •  binutils 2.20 or later

•  Apple SDK for OS X 10.10 Yosemite and 10.9 Mavericks (included in Xcode 6)

Supported operating systems:

•  GNU/Linux 2.6 or later
•  Microsoft Windows XP (5.1) or later
•  FreeBSD 10 or later
•  OS X 10.9 Mavericks or later

Complemake requires Python 2.7 or 3.2 or later to be installed on the build host
system.

Future plans include removal of the dependency on Python.


8. Past, present and future
---------------------------


8.1. Some history
-----------------

Complemake is a spin-off of Abaclade (<https://github.com/raffaellod/abaclade>);
its creation became a necessity as the number of fixes to the different build
systems in use (the traditional make utility and MSBuild) started becoming
excessive:

•  The syntax of traditional makefiles is one of a kind, and often that’s the
   case for its replacements as well; while this is also true for Complemake,
   the syntax for the latter is rather simplified and often only offers one way
   to reach the desired result;

•  Traditional makefiles require toolchain-specific commands/flags to be hard-
   coded in the target build rules;

•  MSBuild requires too many files, creating confusion;

•  Traditional makefiles require quite some tooling to generate build rules for
   intermediate targets;

•  No way of parallelizing the build by default, and many steps had to be
   sequential anyway.


8.2. Current status of Complemake
---------------------------------

Though not yet as complete as it should be, Complemake is the recommended
utility to build projects using Abaclade.


8.3. Project goals
------------------

Complemake has met or is targeting these goals:

1. Offer a fast way of setting up C++ projects using Abaclade;

2. Use all available resources for builds;

3. Fully automate the testing of all targets built;

All future development will be geared towards getting closer to accomplishing
these objectives.




--------------------------------------------------------------------------------
Copyright 2010-2016 Raffaello D. Di Napoli

This file is part of Complemake.

Complemake is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

Complemake is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
Complemake. If not, see <http://www.gnu.org/licenses/>.
